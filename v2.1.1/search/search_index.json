{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mkdocs-simple-plugin This plugin enables you to build a documentation site from markdown interspersed within your repository using mkdocs . About You may be wondering why you would want to generate a static site for your project without doing the typical \"wiki\" thing of consolidating all documentation within a single docs folder or using a single README file. My repository is too big for a single documentation source. Sometimes it isn't feasible to consolidate all documentation within an upper level docs directory. In general, if your codebase is too large to fit well within a single include directory, your codebase is also too large for documentation in a single docs directory. Since it's typically easier to keep documentation up to date when it lives as close to the code as possible, it is better to create multiple sources for documentation. My repository is too simple for advanced documentation. If your codebase is very very large, something like the monorepo plugin might better fit your needs. For most other medium+ repositories that have grown over time, you probably have scattered documentation throughout your code. By combining all of that documentation while keeping folder structure, you can better surface and collaborate with others. And, let's face it. That documentation is probably all in markdown since Github renders it nicely. I want a pretty documentation site without the hassle. Finally, you may be interested in this plugin if you have a desire for easy-to-generate stylized documentation. This plugin lets you take documentation you may already have -- either in markdown files or in your code -- and formats them into a searchable documentation website. You can keep your documentation where it is (thank you very much). See mkdocs-simple-plugin for usage. Contributing See the contributing guide License This software is licensed under Apache 2.0","title":"About"},{"location":"#mkdocs-simple-plugin","text":"This plugin enables you to build a documentation site from markdown interspersed within your repository using mkdocs .","title":"mkdocs-simple-plugin"},{"location":"#about","text":"You may be wondering why you would want to generate a static site for your project without doing the typical \"wiki\" thing of consolidating all documentation within a single docs folder or using a single README file. My repository is too big for a single documentation source. Sometimes it isn't feasible to consolidate all documentation within an upper level docs directory. In general, if your codebase is too large to fit well within a single include directory, your codebase is also too large for documentation in a single docs directory. Since it's typically easier to keep documentation up to date when it lives as close to the code as possible, it is better to create multiple sources for documentation. My repository is too simple for advanced documentation. If your codebase is very very large, something like the monorepo plugin might better fit your needs. For most other medium+ repositories that have grown over time, you probably have scattered documentation throughout your code. By combining all of that documentation while keeping folder structure, you can better surface and collaborate with others. And, let's face it. That documentation is probably all in markdown since Github renders it nicely. I want a pretty documentation site without the hassle. Finally, you may be interested in this plugin if you have a desire for easy-to-generate stylized documentation. This plugin lets you take documentation you may already have -- either in markdown files or in your code -- and formats them into a searchable documentation website. You can keep your documentation where it is (thank you very much). See mkdocs-simple-plugin for usage.","title":"About"},{"location":"#contributing","text":"See the contributing guide","title":"Contributing"},{"location":"#license","text":"This software is licensed under Apache 2.0","title":"License"},{"location":"CONTRIBUTING/","text":"Contributing Guide First off, thanks for taking the time to contribute! The Basics If you are looking to help with a code contribution, this project uses MKDocs for documentation generation, Python for the plugin, along with a splattering of Markdown and ShellScript . I've included my VSCode workspace and a Docker development container. Read about how I develop using VSCode and Docker . If you don't feel ready to make a code contribution yet, no problem! You can also check out the issues we have in the Github issue tracker . How to Contribute Never made an open-source contribution before? Wondering how contributions work in this project? Here's a quick rundown! Find an issue that you are interested in addressing or a feature that you would like to add in the issue tracker . Don't see your issue? Submit one! Fork the repository associated with the issue to your local GitHub account. This means that you will have a copy of the repository under your-GitHub-username/repository-name. Clone the repository to your local machine. git clone https://github.com/github-username/mkdocs-simple-plugin.git Create a new branch for your fix. git checkout -b branch-name-here Make the appropriate changes for the issue you are trying to address or the feature that you want to add. Add the file contents of the changed files to the \"snapshot\" git uses to manage the state of the project, also known as the index. git add <file_list> Insert a short message of the changes made to store the contents of the index with a descriptive message. git commit -m \"Insert a short message of the changes made here\" Push the changes to the remote repository git push origin branch-name-here. Submit a pull request to the upstream repository. Title the pull request with a short description of the changes made and the issue or bug number associated with your change. For example, you can title an issue like so \"Added more log outputting to resolve #4352\". In the description of the pull request, explain the changes that you made, any issues you think exist with the pull request you made, and any questions you have for the maintainer. It's OK if your pull request is not perfect (no pull request is), the reviewer will be able to help you fix any problems and improve it! Wait for the pull request to be reviewed by a maintainer. Make changes to the pull request if the reviewing maintainer recommends them. Celebrate your success after your pull request is merged! Getting Help If you need help, you can ask questions on the issue tracker","title":"Contributing Guide"},{"location":"CONTRIBUTING/#contributing-guide","text":"First off, thanks for taking the time to contribute!","title":"Contributing Guide"},{"location":"CONTRIBUTING/#the-basics","text":"If you are looking to help with a code contribution, this project uses MKDocs for documentation generation, Python for the plugin, along with a splattering of Markdown and ShellScript . I've included my VSCode workspace and a Docker development container. Read about how I develop using VSCode and Docker . If you don't feel ready to make a code contribution yet, no problem! You can also check out the issues we have in the Github issue tracker .","title":"The Basics"},{"location":"CONTRIBUTING/#how-to-contribute","text":"Never made an open-source contribution before? Wondering how contributions work in this project? Here's a quick rundown! Find an issue that you are interested in addressing or a feature that you would like to add in the issue tracker . Don't see your issue? Submit one! Fork the repository associated with the issue to your local GitHub account. This means that you will have a copy of the repository under your-GitHub-username/repository-name. Clone the repository to your local machine. git clone https://github.com/github-username/mkdocs-simple-plugin.git Create a new branch for your fix. git checkout -b branch-name-here Make the appropriate changes for the issue you are trying to address or the feature that you want to add. Add the file contents of the changed files to the \"snapshot\" git uses to manage the state of the project, also known as the index. git add <file_list> Insert a short message of the changes made to store the contents of the index with a descriptive message. git commit -m \"Insert a short message of the changes made here\" Push the changes to the remote repository git push origin branch-name-here. Submit a pull request to the upstream repository. Title the pull request with a short description of the changes made and the issue or bug number associated with your change. For example, you can title an issue like so \"Added more log outputting to resolve #4352\". In the description of the pull request, explain the changes that you made, any issues you think exist with the pull request you made, and any questions you have for the maintainer. It's OK if your pull request is not perfect (no pull request is), the reviewer will be able to help you fix any problems and improve it! Wait for the pull request to be reviewed by a maintainer. Make changes to the pull request if the reviewing maintainer recommends them. Celebrate your success after your pull request is merged!","title":"How to Contribute"},{"location":"CONTRIBUTING/#getting-help","text":"If you need help, you can ask questions on the issue tracker","title":"Getting Help"},{"location":"action/","text":"Deploy from GitHub Actions Create a YAML file with the following contents in the .github/workflows directory in your repository jobs : docs : runs-on : ubuntu-latest steps : - name : Checkout uses : actions/checkout@v2 - name : Build docs uses : athackst/mkdocs-simple-plugin with : # (optional) Specify branch publish_branch : gh-pages # (optional) The URL of the repository the docs should point to repo_url : https://github.com/owner/repository # (optional) The name of the site site_name : owner/repository # (optional) The URL of the site site_url : https://owner.github.io/repository # (optional) The edit URI edit_uri : edit/main/ # (optional) Specify a google analytics key google_analytics : UA-XXXXXXX # (optional) Specify a different theme [mkdocs|readthedocs|material] theme : material # (optional) Load a configuration file from a string config : \"mkdocs.yml\" # (optional) Version or alias. Specify multiple aliases with space # example: version: v0.1.0 latest version : latest # (optional) The version that will be served by the root of your site default_version : latest # (optional) Whether to push the docs to the remote branch push : 1","title":"Github Action"},{"location":"action/#deploy-from-github-actions","text":"Create a YAML file with the following contents in the .github/workflows directory in your repository jobs : docs : runs-on : ubuntu-latest steps : - name : Checkout uses : actions/checkout@v2 - name : Build docs uses : athackst/mkdocs-simple-plugin with : # (optional) Specify branch publish_branch : gh-pages # (optional) The URL of the repository the docs should point to repo_url : https://github.com/owner/repository # (optional) The name of the site site_name : owner/repository # (optional) The URL of the site site_url : https://owner.github.io/repository # (optional) The edit URI edit_uri : edit/main/ # (optional) Specify a google analytics key google_analytics : UA-XXXXXXX # (optional) Specify a different theme [mkdocs|readthedocs|material] theme : material # (optional) Load a configuration file from a string config : \"mkdocs.yml\" # (optional) Version or alias. Specify multiple aliases with space # example: version: v0.1.0 latest version : latest # (optional) The version that will be served by the root of your site default_version : latest # (optional) Whether to push the docs to the remote branch push : 1","title":"Deploy from GitHub Actions"},{"location":"docker/","text":"Docker Use this image to create a mkdocs site with the mkdocs-simple-plugin Using the docker image, you don't need to have the plugin or its dependencies installed on your system to build, test, and deploy a mkdocs generated site. Run in a docker container Install, build and serve your docs: docker run --rm -it --network = host -v ${ PWD } :/docs --user $( id -u ) : $( id -g ) althack/mkdocs-simple-plugin Explanation of docker command-line options command description -p 8000:8000 [required] Map the mkdocs server port to a port on your localhost. -v ${PWD}:/docs [required] Mount the local directory into the docs directory to build site. --user $(id -u):$(id -g) [recommended] Run the docker container with the current user and group. --rm [optional] remove the docker image after it finishes running. -it [optional] run in an interactive terminal. The docker image runs mkdocs serve by default. Set up a command-line alias Add an alias for the docker command to serve docs from any workspace. echo 'function mkdocs_simple() { local port=${1:-\"8000\"} docker run --rm -p ${port}:8000 -v ${PWD}:/docs --user $(id -u):$(id -g) althack/mkdocs-simple-plugin }' >> ~/.bashrc","title":"Docker"},{"location":"docker/#docker","text":"Use this image to create a mkdocs site with the mkdocs-simple-plugin Using the docker image, you don't need to have the plugin or its dependencies installed on your system to build, test, and deploy a mkdocs generated site.","title":"Docker"},{"location":"docker/#run-in-a-docker-container","text":"Install, build and serve your docs: docker run --rm -it --network = host -v ${ PWD } :/docs --user $( id -u ) : $( id -g ) althack/mkdocs-simple-plugin Explanation of docker command-line options command description -p 8000:8000 [required] Map the mkdocs server port to a port on your localhost. -v ${PWD}:/docs [required] Mount the local directory into the docs directory to build site. --user $(id -u):$(id -g) [recommended] Run the docker container with the current user and group. --rm [optional] remove the docker image after it finishes running. -it [optional] run in an interactive terminal. The docker image runs mkdocs serve by default.","title":"Run in a docker container"},{"location":"docker/#set-up-a-command-line-alias","text":"Add an alias for the docker command to serve docs from any workspace. echo 'function mkdocs_simple() { local port=${1:-\"8000\"} docker run --rm -p ${port}:8000 -v ${PWD}:/docs --user $(id -u):$(id -g) althack/mkdocs-simple-plugin }' >> ~/.bashrc","title":"Set up a command-line alias"},{"location":"examples/ok-mkdocs-custom-extract/","text":"Front matter extraction mkdocs.yml # This example shows how to set up custom extraction modes. Litcoffee files # consist of interspersed Markdown and Coffeescript code. The pattern # defined here extracts a documentation page from each such file, consisting of: # everything from the beginning of the file to the first line of code # (a line indented by at least four spaces), together with any later Markdown # block preceded by a comment containing `# DOCPAGE`. # # Similarly, you may want to have to have a custom extraction even for a # standard file pattern, or for one particular file; the `drone.yml` pattern # could for example extract development documentation from a Drone yml file. # Note this latter pattern takes advantage of the fact that you can have just # a single top-level block of parameters in an `extract:` section. site_name : ok-mkdocs-custom-extract plugins : - simple : semiliterate : - pattern : '\\.litcoffee' extract : - { stop : '^\\s{4,}\\S' } # No start, so active from beginning - { start : '# DOCPAGE' , stop : '^\\s{4,}\\S' } - pattern : 'drone.yml' destination : 'drone_develop.md' extract : start : '### develop' stop : '^\\s*###' replace : [ '^# (.*\\s*)$' , '^\\s*-(.*\\s*)$' ] Input ok-mkdocs-custom-extract/ \u251c\u2500\u2500 drone.yml \u251c\u2500\u2500 fibo.litcoffee \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 README.md fibo.litcoffee This paragraph is here to make sure the extraction starts immediately. # Coffee Fibonacci Although trite, this is an example of the sum recurrence. fib = (n) -> # Base cases if n in [ 1 , 2 ] return 1 # Recursive calls fib(n-1) + fib(n-2) ## Example usage This is perfectly good Markdown commentary, but will not appear in the extracted doc page. fib(3) # => fib(2) + fib(1) => 2 # DOCPAGE ## Complexity This note about complexity will appear in the doc page. Output site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 drone_develop/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 fibo/ \u2502 \u2514\u2500\u2500 index.html \u2514\u2500\u2500 index.html drone_develop Developing You can clone the repository with git clone https://this_is_a_dummy_url You can build the distribution with pip install build python -m build . That will produce a .whl file in the dist subdirectory. fibo This paragraph is here to make sure the extraction starts immediately. Coffee Fibonacci Although trite, this is an example of the sum recurrence. Complexity This note about complexity will appear in the doc page.","title":"Index"},{"location":"examples/ok-mkdocs-custom-extract/#front-matter-extraction","text":"","title":"Front matter extraction"},{"location":"examples/ok-mkdocs-custom-extract/#mkdocsyml","text":"# This example shows how to set up custom extraction modes. Litcoffee files # consist of interspersed Markdown and Coffeescript code. The pattern # defined here extracts a documentation page from each such file, consisting of: # everything from the beginning of the file to the first line of code # (a line indented by at least four spaces), together with any later Markdown # block preceded by a comment containing `# DOCPAGE`. # # Similarly, you may want to have to have a custom extraction even for a # standard file pattern, or for one particular file; the `drone.yml` pattern # could for example extract development documentation from a Drone yml file. # Note this latter pattern takes advantage of the fact that you can have just # a single top-level block of parameters in an `extract:` section. site_name : ok-mkdocs-custom-extract plugins : - simple : semiliterate : - pattern : '\\.litcoffee' extract : - { stop : '^\\s{4,}\\S' } # No start, so active from beginning - { start : '# DOCPAGE' , stop : '^\\s{4,}\\S' } - pattern : 'drone.yml' destination : 'drone_develop.md' extract : start : '### develop' stop : '^\\s*###' replace : [ '^# (.*\\s*)$' , '^\\s*-(.*\\s*)$' ]","title":"mkdocs.yml"},{"location":"examples/ok-mkdocs-custom-extract/#input","text":"ok-mkdocs-custom-extract/ \u251c\u2500\u2500 drone.yml \u251c\u2500\u2500 fibo.litcoffee \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 README.md fibo.litcoffee This paragraph is here to make sure the extraction starts immediately. # Coffee Fibonacci Although trite, this is an example of the sum recurrence. fib = (n) -> # Base cases if n in [ 1 , 2 ] return 1 # Recursive calls fib(n-1) + fib(n-2) ## Example usage This is perfectly good Markdown commentary, but will not appear in the extracted doc page. fib(3) # => fib(2) + fib(1) => 2 # DOCPAGE ## Complexity This note about complexity will appear in the doc page.","title":"Input"},{"location":"examples/ok-mkdocs-custom-extract/#output","text":"site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 drone_develop/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 fibo/ \u2502 \u2514\u2500\u2500 index.html \u2514\u2500\u2500 index.html drone_develop","title":"Output"},{"location":"examples/ok-mkdocs-docs/docs/","text":"Just a docs folder This example shows how this plugin can be used with just a docs directory mkdocs.yml site_name : project plugins : - simple Input project \u2502 \u2514\u2500\u2500\u2500docs \u2502 \u2502 README.md Output project \u2502 \u2514\u2500\u2500\u2500docs \u2502 \u2502 README.md \u2502 \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html","title":"Just a docs folder"},{"location":"examples/ok-mkdocs-docs/docs/#just-a-docs-folder","text":"This example shows how this plugin can be used with just a docs directory","title":"Just a docs folder"},{"location":"examples/ok-mkdocs-docs/docs/#mkdocsyml","text":"site_name : project plugins : - simple","title":"mkdocs.yml"},{"location":"examples/ok-mkdocs-docs/docs/#input","text":"project \u2502 \u2514\u2500\u2500\u2500docs \u2502 \u2502 README.md","title":"Input"},{"location":"examples/ok-mkdocs-docs/docs/#output","text":"project \u2502 \u2514\u2500\u2500\u2500docs \u2502 \u2502 README.md \u2502 \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html","title":"Output"},{"location":"examples/ok-mkdocs-docs-extensions/","text":"Extra extensions mkdocs.yml # This example shows how extensions are copied to the result site_name : ok-mkdocs-docs-extensions plugins : - simple : include_extensions : [ \".txt\" ] Input ok-mkdocs-docs-extensions/ \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md \u2514\u2500\u2500 test.txt Output site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 index.html \u2514\u2500\u2500 test.txt","title":"Index"},{"location":"examples/ok-mkdocs-docs-extensions/#extra-extensions","text":"","title":"Extra extensions"},{"location":"examples/ok-mkdocs-docs-extensions/#mkdocsyml","text":"# This example shows how extensions are copied to the result site_name : ok-mkdocs-docs-extensions plugins : - simple : include_extensions : [ \".txt\" ]","title":"mkdocs.yml"},{"location":"examples/ok-mkdocs-docs-extensions/#input","text":"ok-mkdocs-docs-extensions/ \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md \u2514\u2500\u2500 test.txt","title":"Input"},{"location":"examples/ok-mkdocs-docs-extensions/#output","text":"site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 index.html \u2514\u2500\u2500 test.txt","title":"Output"},{"location":"examples/ok-mkdocs-docs-ignore/","text":"Ignore a folder mkdocs.yml # This example shows how a subfolder can be ignored. site_name : ok-mkdocs-docs-ignore plugins : - simple : ignore_folders : [ \"subfolder\" ] Input ok-mkdocs-docs-ignore/ \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 other-folder/ \u2502 \u2514\u2500\u2500 subfolder/ \u2502 \u251c\u2500\u2500 draft.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 README.md \u251c\u2500\u2500 subfolder/ \u2502 \u251c\u2500\u2500 draft.md \u2502 \u2514\u2500\u2500 index.md \u2514\u2500\u2500 test.md Output site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 index.html \u251c\u2500\u2500 other-folder/ \u2502 \u2514\u2500\u2500 subfolder/ \u2502 \u251c\u2500\u2500 draft/ \u2502 \u2502 \u2514\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 index.html \u2514\u2500\u2500 test/ \u2514\u2500\u2500 index.html","title":"Index"},{"location":"examples/ok-mkdocs-docs-ignore/#ignore-a-folder","text":"","title":"Ignore a folder"},{"location":"examples/ok-mkdocs-docs-ignore/#mkdocsyml","text":"# This example shows how a subfolder can be ignored. site_name : ok-mkdocs-docs-ignore plugins : - simple : ignore_folders : [ \"subfolder\" ]","title":"mkdocs.yml"},{"location":"examples/ok-mkdocs-docs-ignore/#input","text":"ok-mkdocs-docs-ignore/ \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 other-folder/ \u2502 \u2514\u2500\u2500 subfolder/ \u2502 \u251c\u2500\u2500 draft.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 README.md \u251c\u2500\u2500 subfolder/ \u2502 \u251c\u2500\u2500 draft.md \u2502 \u2514\u2500\u2500 index.md \u2514\u2500\u2500 test.md","title":"Input"},{"location":"examples/ok-mkdocs-docs-ignore/#output","text":"site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 index.html \u251c\u2500\u2500 other-folder/ \u2502 \u2514\u2500\u2500 subfolder/ \u2502 \u251c\u2500\u2500 draft/ \u2502 \u2502 \u2514\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 index.html \u2514\u2500\u2500 test/ \u2514\u2500\u2500 index.html","title":"Output"},{"location":"examples/ok-mkdocs-docs-ignore/test/","text":"Test This is a test file.","title":"Test"},{"location":"examples/ok-mkdocs-docs-ignore/test/#test","text":"This is a test file.","title":"Test"},{"location":"examples/ok-mkdocs-docs-ignore/other-folder/subfolder/","text":"Hello World This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-ignore/other-folder/subfolder/#hello-world","text":"This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-ignore/other-folder/subfolder/draft/","text":"Draft This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-docs-ignore/other-folder/subfolder/draft/#draft","text":"This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-docs-ignore/subfolder/","text":"Hello World This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-ignore/subfolder/#hello-world","text":"This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-ignore/subfolder/draft/","text":"Draft This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-docs-ignore/subfolder/draft/#draft","text":"This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-docs-include/","text":"Only include a specific folder mkdocs.yml # This example shows how to only include from a specific folder site_name : ok-mkdocs-docs-include plugins : - simple : include_folders : [ \"subfolder/**\" ] Input ok-mkdocs-docs-include/ \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 subfolder/ \u2502 \u251c\u2500\u2500 draft.md \u2502 \u2514\u2500\u2500 index.md \u2514\u2500\u2500 test.md Output site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u2514\u2500\u2500 subfolder/ \u251c\u2500\u2500 draft/ \u2502 \u2514\u2500\u2500 index.html \u2514\u2500\u2500 index.html","title":"Index"},{"location":"examples/ok-mkdocs-docs-include/#only-include-a-specific-folder","text":"","title":"Only include a specific folder"},{"location":"examples/ok-mkdocs-docs-include/#mkdocsyml","text":"# This example shows how to only include from a specific folder site_name : ok-mkdocs-docs-include plugins : - simple : include_folders : [ \"subfolder/**\" ]","title":"mkdocs.yml"},{"location":"examples/ok-mkdocs-docs-include/#input","text":"ok-mkdocs-docs-include/ \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 subfolder/ \u2502 \u251c\u2500\u2500 draft.md \u2502 \u2514\u2500\u2500 index.md \u2514\u2500\u2500 test.md","title":"Input"},{"location":"examples/ok-mkdocs-docs-include/#output","text":"site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u2514\u2500\u2500 subfolder/ \u251c\u2500\u2500 draft/ \u2502 \u2514\u2500\u2500 index.html \u2514\u2500\u2500 index.html","title":"Output"},{"location":"examples/ok-mkdocs-docs-include/test/","text":"Test This is a test file.","title":"Test"},{"location":"examples/ok-mkdocs-docs-include/test/#test","text":"This is a test file.","title":"Test"},{"location":"examples/ok-mkdocs-docs-include/subfolder/","text":"Hello World This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-include/subfolder/#hello-world","text":"This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-include/subfolder/draft/","text":"Draft This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-docs-include/subfolder/draft/#draft","text":"This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-docs-merge/","text":"Merge into docs folder mkdocs.yml # This example shows how to merge a docs folder with other documentation. site_name : ok-mkdocs-docs-merge plugins : - simple Input ok-mkdocs-docs-merge/ \u251c\u2500\u2500 docs/ \u2502 \u251c\u2500\u2500 draft.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md \u2514\u2500\u2500 test.md Output site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 draft/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 index.html \u2514\u2500\u2500 test/ \u2514\u2500\u2500 index.html","title":"Index"},{"location":"examples/ok-mkdocs-docs-merge/#merge-into-docs-folder","text":"","title":"Merge into docs folder"},{"location":"examples/ok-mkdocs-docs-merge/#mkdocsyml","text":"# This example shows how to merge a docs folder with other documentation. site_name : ok-mkdocs-docs-merge plugins : - simple","title":"mkdocs.yml"},{"location":"examples/ok-mkdocs-docs-merge/#input","text":"ok-mkdocs-docs-merge/ \u251c\u2500\u2500 docs/ \u2502 \u251c\u2500\u2500 draft.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md \u2514\u2500\u2500 test.md","title":"Input"},{"location":"examples/ok-mkdocs-docs-merge/#output","text":"site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 draft/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 index.html \u2514\u2500\u2500 test/ \u2514\u2500\u2500 index.html","title":"Output"},{"location":"examples/ok-mkdocs-docs-merge/test/","text":"Test This is a test file.","title":"Test"},{"location":"examples/ok-mkdocs-docs-merge/test/#test","text":"This is a test file.","title":"Test"},{"location":"examples/ok-mkdocs-docs-merge/docs/","text":"Hello World This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-merge/docs/#hello-world","text":"This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-merge/docs/draft/","text":"Draft This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-docs-merge/docs/draft/#draft","text":"This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-docs-no-merge/","text":"Don't merge docs folder mkdocs.yml # This example shows how to keep the docs folder embedded within your other docs. site_name : ok-mkdocs-docs-no-merge plugins : - simple : merge_docs_dir : false Input ok-mkdocs-docs-no-merge/ \u251c\u2500\u2500 docs/ \u2502 \u251c\u2500\u2500 draft.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md \u2514\u2500\u2500 test.md Output site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 docs/ \u2502 \u251c\u2500\u2500 draft/ \u2502 \u2502 \u2514\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 index.html \u2514\u2500\u2500 test/ \u2514\u2500\u2500 index.html","title":"Index"},{"location":"examples/ok-mkdocs-docs-no-merge/#dont-merge-docs-folder","text":"","title":"Don't merge docs folder"},{"location":"examples/ok-mkdocs-docs-no-merge/#mkdocsyml","text":"# This example shows how to keep the docs folder embedded within your other docs. site_name : ok-mkdocs-docs-no-merge plugins : - simple : merge_docs_dir : false","title":"mkdocs.yml"},{"location":"examples/ok-mkdocs-docs-no-merge/#input","text":"ok-mkdocs-docs-no-merge/ \u251c\u2500\u2500 docs/ \u2502 \u251c\u2500\u2500 draft.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md \u2514\u2500\u2500 test.md","title":"Input"},{"location":"examples/ok-mkdocs-docs-no-merge/#output","text":"site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 docs/ \u2502 \u251c\u2500\u2500 draft/ \u2502 \u2502 \u2514\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 index.html \u2514\u2500\u2500 test/ \u2514\u2500\u2500 index.html","title":"Output"},{"location":"examples/ok-mkdocs-docs-no-merge/test/","text":"Test This is a test file.","title":"Test"},{"location":"examples/ok-mkdocs-docs-no-merge/test/#test","text":"This is a test file.","title":"Test"},{"location":"examples/ok-mkdocs-docs-no-merge/docs/","text":"Hello World This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-no-merge/docs/#hello-world","text":"This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-no-merge/docs/draft/","text":"Draft This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-docs-no-merge/docs/draft/#draft","text":"This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-ignore-file/","text":"Ignore a file mkdocs.yml # This tests if the site directory is ignored in both build and serve. site_name : ok-mkdocs-ignore-file plugins : - simple : Input ok-mkdocs-ignore-file/ \u251c\u2500\u2500 hello_world.cpp \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md \u2514\u2500\u2500 test.md hello_world.cpp /** md-ignore # Ignore me Ignore everything beyond the first line since it contains md-ignore. **/ #include <iostream> int main () { /** md # Hello world This is the main function for hello world. It outputs \"Hello World!\" to the screen. **/ std :: cout << \"Hello World!\" ; return 0 ; } Output site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 index.html \u2514\u2500\u2500 test/ \u2514\u2500\u2500 index.html","title":"Index"},{"location":"examples/ok-mkdocs-ignore-file/#ignore-a-file","text":"","title":"Ignore a file"},{"location":"examples/ok-mkdocs-ignore-file/#mkdocsyml","text":"# This tests if the site directory is ignored in both build and serve. site_name : ok-mkdocs-ignore-file plugins : - simple :","title":"mkdocs.yml"},{"location":"examples/ok-mkdocs-ignore-file/#input","text":"ok-mkdocs-ignore-file/ \u251c\u2500\u2500 hello_world.cpp \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md \u2514\u2500\u2500 test.md hello_world.cpp /** md-ignore # Ignore me Ignore everything beyond the first line since it contains md-ignore. **/ #include <iostream> int main () { /** md # Hello world This is the main function for hello world. It outputs \"Hello World!\" to the screen. **/ std :: cout << \"Hello World!\" ; return 0 ; }","title":"Input"},{"location":"examples/ok-mkdocs-ignore-file/#output","text":"site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 index.html \u2514\u2500\u2500 test/ \u2514\u2500\u2500 index.html","title":"Output"},{"location":"examples/ok-mkdocs-ignore-file/test/","text":"Hello World This is for testing files in the main directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-ignore-file/test/#hello-world","text":"This is for testing files in the main directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-ignore-site-dir/","text":"Hello World This is for testing files in the main directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-ignore-site-dir/#hello-world","text":"This is for testing files in the main directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-inline-settings/","text":"Extract with inline settings mkdocs.yml # This is the simplest documentation site you could have. # It's just a simple readme. site_name : ok-mkdocs-inline-settings plugins : - simple Input ok-mkdocs-inline-settings/ \u251c\u2500\u2500 hello_world.cpp \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 README.md hello_world.cpp #include <iostream> int main () { /** md file=main.md trim=2 stop=\"end-here\" # Hello world This is the main function for hello world. It outputs \"Hello World!\" to the screen. end-here This shouldn't show up! **/ std :: cout << \"Hello World!\" ; return 0 ; } Output site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 index.html \u2514\u2500\u2500 main/ \u2514\u2500\u2500 index.html main Hello world This is the main function for hello world. It outputs \"Hello World!\" to the screen.","title":"Index"},{"location":"examples/ok-mkdocs-inline-settings/#extract-with-inline-settings","text":"","title":"Extract with inline settings"},{"location":"examples/ok-mkdocs-inline-settings/#mkdocsyml","text":"# This is the simplest documentation site you could have. # It's just a simple readme. site_name : ok-mkdocs-inline-settings plugins : - simple","title":"mkdocs.yml"},{"location":"examples/ok-mkdocs-inline-settings/#input","text":"ok-mkdocs-inline-settings/ \u251c\u2500\u2500 hello_world.cpp \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 README.md hello_world.cpp #include <iostream> int main () { /** md file=main.md trim=2 stop=\"end-here\" # Hello world This is the main function for hello world. It outputs \"Hello World!\" to the screen. end-here This shouldn't show up! **/ std :: cout << \"Hello World!\" ; return 0 ; }","title":"Input"},{"location":"examples/ok-mkdocs-inline-settings/#output","text":"site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 index.html \u2514\u2500\u2500 main/ \u2514\u2500\u2500 index.html main","title":"Output"},{"location":"examples/ok-mkdocs-inline-settings/main/","text":"Hello world This is the main function for hello world. It outputs \"Hello World!\" to the screen.","title":"Hello world"},{"location":"examples/ok-mkdocs-inline-settings/main/#hello-world","text":"This is the main function for hello world. It outputs \"Hello World!\" to the screen.","title":"Hello world"},{"location":"examples/ok-mkdocs-readme/","text":"Simple readme mkdocs.yml # This is the simplest documentation site you could have. # It's just a simple readme. site_name : ok-mkdocs-readme plugins : - simple Input ok-mkdocs-readme/ \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 README.md Output site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u2514\u2500\u2500 index.html","title":"Index"},{"location":"examples/ok-mkdocs-readme/#simple-readme","text":"","title":"Simple readme"},{"location":"examples/ok-mkdocs-readme/#mkdocsyml","text":"# This is the simplest documentation site you could have. # It's just a simple readme. site_name : ok-mkdocs-readme plugins : - simple","title":"mkdocs.yml"},{"location":"examples/ok-mkdocs-readme/#input","text":"ok-mkdocs-readme/ \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 README.md","title":"Input"},{"location":"examples/ok-mkdocs-readme/#output","text":"site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u2514\u2500\u2500 index.html","title":"Output"},{"location":"examples/ok-mkdocsignore/","text":"Ignore with .mkdocsignore mkdocs.yml # Ignore files with a .mkdocsignore file. site_name : ok-mkdocsignore plugins : - simple Input ok-mkdocsignore/ \u251c\u2500\u2500 .mkdocsignore \u251c\u2500\u2500 hello/ \u2502 \u251c\u2500\u2500 foo/ \u2502 \u2502 \u251c\u2500\u2500 bar.md \u2502 \u2502 \u2514\u2500\u2500 foo.md \u2502 \u251c\u2500\u2500 hello.md \u2502 \u2514\u2500\u2500 world/ \u2502 \u251c\u2500\u2500 .mkdocsignore \u2502 \u2514\u2500\u2500 world.md \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md \u2514\u2500\u2500 test/ \u251c\u2500\u2500 bar.md \u2514\u2500\u2500 foo.md .mkdocsignore # Ignore everything in the test folder test # Ignore the foo file in hello/foo hello/foo/foo* hello/world/.mkdocsignore # Ignore everything in this folder Output site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 hello/ \u2502 \u251c\u2500\u2500 foo/ \u2502 \u2502 \u2514\u2500\u2500 bar/ \u2502 \u2502 \u2514\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 hello/ \u2502 \u2514\u2500\u2500 index.html \u2514\u2500\u2500 index.html","title":"Index"},{"location":"examples/ok-mkdocsignore/#ignore-with-mkdocsignore","text":"","title":"Ignore with .mkdocsignore"},{"location":"examples/ok-mkdocsignore/#mkdocsyml","text":"# Ignore files with a .mkdocsignore file. site_name : ok-mkdocsignore plugins : - simple","title":"mkdocs.yml"},{"location":"examples/ok-mkdocsignore/#input","text":"ok-mkdocsignore/ \u251c\u2500\u2500 .mkdocsignore \u251c\u2500\u2500 hello/ \u2502 \u251c\u2500\u2500 foo/ \u2502 \u2502 \u251c\u2500\u2500 bar.md \u2502 \u2502 \u2514\u2500\u2500 foo.md \u2502 \u251c\u2500\u2500 hello.md \u2502 \u2514\u2500\u2500 world/ \u2502 \u251c\u2500\u2500 .mkdocsignore \u2502 \u2514\u2500\u2500 world.md \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md \u2514\u2500\u2500 test/ \u251c\u2500\u2500 bar.md \u2514\u2500\u2500 foo.md .mkdocsignore # Ignore everything in the test folder test # Ignore the foo file in hello/foo hello/foo/foo* hello/world/.mkdocsignore # Ignore everything in this folder","title":"Input"},{"location":"examples/ok-mkdocsignore/#output","text":"site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 hello/ \u2502 \u251c\u2500\u2500 foo/ \u2502 \u2502 \u2514\u2500\u2500 bar/ \u2502 \u2502 \u2514\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 hello/ \u2502 \u2514\u2500\u2500 index.html \u2514\u2500\u2500 index.html","title":"Output"},{"location":"examples/ok-mkdocsignore/hello/hello/","text":"Test Hello This is a hello test.","title":"Test Hello"},{"location":"examples/ok-mkdocsignore/hello/hello/#test-hello","text":"This is a hello test.","title":"Test Hello"},{"location":"examples/ok-mkdocsignore/hello/foo/bar/","text":"Bar This is for testing files in the hello/foo directory.","title":"Bar"},{"location":"examples/ok-mkdocsignore/hello/foo/bar/#bar","text":"This is for testing files in the hello/foo directory.","title":"Bar"},{"location":"examples/ok-source-extract/","text":"Extract docs from source mkdocs.yml # This examples shows how you can extract markdown from a source file. site_name : ok-source-extract plugins : - simple Input ok-source-extract/ \u251c\u2500\u2500 main.c \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 module.py \u2514\u2500\u2500 README.md main.c #include <stdio.h> /** md ## Detailed documentation ### block comments block comments are added with `/** md` and conclude with `**\\/` tags. **/ // md // ### line comments // // line comments are added with `// md` and conclude with `// end md` tags // end md int main () { printf ( \"Hello, world!\" ); return 0 ; } module.py \"\"\"md ## Python Version You can put _markdown_ in triple-quoted strings in Python. \"\"\" # md # ### inline comments # # It works in inline comments. The start and end markers must be on their own # lines. # /md def main (): # noqa: D207 \"\"\"<md trim=4 >Main test. ### docstrings It works in docstrings. The start and end quotes must be on their own lines. You can even tell it to remove leading whitespace with the 'trim' option. \"\"\" print ( \"Hello, world!\" ) return 0 Output site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 index.html \u251c\u2500\u2500 main/ \u2502 \u2514\u2500\u2500 index.html \u2514\u2500\u2500 module/ \u2514\u2500\u2500 index.html main Detailed documentation block comments block comments are added with /** md and conclude with **\\/ tags. line comments line comments are added with // md and conclude with // end md tags module Python Version You can put markdown in triple-quoted strings in Python. inline comments It works in inline comments. The start and end markers must be on their own lines. docstrings It works in docstrings. The start and end quotes must be on their own lines. You can even tell it to remove leading whitespace with the 'trim' option.","title":"Index"},{"location":"examples/ok-source-extract/#extract-docs-from-source","text":"","title":"Extract docs from source"},{"location":"examples/ok-source-extract/#mkdocsyml","text":"# This examples shows how you can extract markdown from a source file. site_name : ok-source-extract plugins : - simple","title":"mkdocs.yml"},{"location":"examples/ok-source-extract/#input","text":"ok-source-extract/ \u251c\u2500\u2500 main.c \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 module.py \u2514\u2500\u2500 README.md main.c #include <stdio.h> /** md ## Detailed documentation ### block comments block comments are added with `/** md` and conclude with `**\\/` tags. **/ // md // ### line comments // // line comments are added with `// md` and conclude with `// end md` tags // end md int main () { printf ( \"Hello, world!\" ); return 0 ; } module.py \"\"\"md ## Python Version You can put _markdown_ in triple-quoted strings in Python. \"\"\" # md # ### inline comments # # It works in inline comments. The start and end markers must be on their own # lines. # /md def main (): # noqa: D207 \"\"\"<md trim=4 >Main test. ### docstrings It works in docstrings. The start and end quotes must be on their own lines. You can even tell it to remove leading whitespace with the 'trim' option. \"\"\" print ( \"Hello, world!\" ) return 0","title":"Input"},{"location":"examples/ok-source-extract/#output","text":"site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 index.html \u251c\u2500\u2500 main/ \u2502 \u2514\u2500\u2500 index.html \u2514\u2500\u2500 module/ \u2514\u2500\u2500 index.html main","title":"Output"},{"location":"examples/ok-source-extract/main/","text":"Detailed documentation block comments block comments are added with /** md and conclude with **\\/ tags. line comments line comments are added with // md and conclude with // end md tags","title":"Main"},{"location":"examples/ok-source-extract/main/#detailed-documentation","text":"","title":"Detailed documentation"},{"location":"examples/ok-source-extract/main/#block-comments","text":"block comments are added with /** md and conclude with **\\/ tags.","title":"block comments"},{"location":"examples/ok-source-extract/main/#line-comments","text":"line comments are added with // md and conclude with // end md tags","title":"line comments"},{"location":"examples/ok-source-extract/module/","text":"Python Version You can put markdown in triple-quoted strings in Python. inline comments It works in inline comments. The start and end markers must be on their own lines. docstrings It works in docstrings. The start and end quotes must be on their own lines. You can even tell it to remove leading whitespace with the 'trim' option.","title":"Module"},{"location":"examples/ok-source-extract/module/#python-version","text":"You can put markdown in triple-quoted strings in Python.","title":"Python Version"},{"location":"examples/ok-source-extract/module/#inline-comments","text":"It works in inline comments. The start and end markers must be on their own lines.","title":"inline comments"},{"location":"examples/ok-source-extract/module/#docstrings","text":"It works in docstrings. The start and end quotes must be on their own lines. You can even tell it to remove leading whitespace with the 'trim' option.","title":"docstrings"},{"location":"examples/ok-source-replace/","text":"Advanced replacement mkdocs.yml # This example shows how to replace lines with regex expressions! site_name : ok-source-replace plugins : - simple : semiliterate : - pattern : \\.py$ extract : - start : ^\\s*\"\"\"\\W?md\\b stop : ^\\s*\"\"\"\\s*$ replace : # replace \"foo\" with \"bar\" - [ \"(.*)foo(.*)$\" , \"\\\\1bar\\\\2\" ] # only capture what's after args and replace with parameter prefix - [ \"args:(.*)$\" , \"parameters:\\\\1\" ] # capture everything after `only_this:` - \"only_this:(.*)$\" # drop lines starting with drop - \"^drop\" Input ok-source-replace/ \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 module.py \u2514\u2500\u2500 README.md module.py \"\"\"md ## Python Version You can put _markdown_ in triple-quoted strings in Python. You can even replace things! You should see foo replaced by bar in this sentence. args: This line should start with `parameters`. blah blah blah only_this: Only this is captured. drop this line! \"\"\" def main (): \"\"\"Main test.\"\"\" print ( \"Hello, world!\" ) return 0 Output site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 index.html \u2514\u2500\u2500 module/ \u2514\u2500\u2500 index.html module Python Version You can put markdown in triple-quoted strings in Python. You can even replace things! You should see bar replaced by bar in this sentence. parameters: This line should start with parameters . Only this is captured.","title":"Index"},{"location":"examples/ok-source-replace/#advanced-replacement","text":"","title":"Advanced replacement"},{"location":"examples/ok-source-replace/#mkdocsyml","text":"# This example shows how to replace lines with regex expressions! site_name : ok-source-replace plugins : - simple : semiliterate : - pattern : \\.py$ extract : - start : ^\\s*\"\"\"\\W?md\\b stop : ^\\s*\"\"\"\\s*$ replace : # replace \"foo\" with \"bar\" - [ \"(.*)foo(.*)$\" , \"\\\\1bar\\\\2\" ] # only capture what's after args and replace with parameter prefix - [ \"args:(.*)$\" , \"parameters:\\\\1\" ] # capture everything after `only_this:` - \"only_this:(.*)$\" # drop lines starting with drop - \"^drop\"","title":"mkdocs.yml"},{"location":"examples/ok-source-replace/#input","text":"ok-source-replace/ \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 module.py \u2514\u2500\u2500 README.md module.py \"\"\"md ## Python Version You can put _markdown_ in triple-quoted strings in Python. You can even replace things! You should see foo replaced by bar in this sentence. args: This line should start with `parameters`. blah blah blah only_this: Only this is captured. drop this line! \"\"\" def main (): \"\"\"Main test.\"\"\" print ( \"Hello, world!\" ) return 0","title":"Input"},{"location":"examples/ok-source-replace/#output","text":"site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 index.html \u2514\u2500\u2500 module/ \u2514\u2500\u2500 index.html module","title":"Output"},{"location":"examples/ok-source-replace/module/","text":"Python Version You can put markdown in triple-quoted strings in Python. You can even replace things! You should see foo replaced by bar in this sentence. args: This line should start with parameters . blah blah blah only_this: Only this is captured. drop this line!","title":"Module"},{"location":"examples/ok-source-replace/module/#python-version","text":"You can put markdown in triple-quoted strings in Python. You can even replace things! You should see foo replaced by bar in this sentence. args: This line should start with parameters . blah blah blah only_this: Only this is captured. drop this line!","title":"Python Version"},{"location":"examples/ok-source-with-snippet/","text":"Extract a snippet mkdocs.yml # This is example shows to to create a snippet from a file. For example, you # can use a snippet to rearrange contents using inclusion or create a new pages # per module. site_name : ok-source-with-snippet plugins : - simple Input ok-source-with-snippet/ \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 module.py \u251c\u2500\u2500 README.md module.py \"\"\"md ## Main file You can even make snippets as separate files. \"\"\" # md file=snippet.md # # ## Snippet # # This is a snippet from module.py. # /md \"\"\"<md file=\"snippet2.md\">Another one. ## Snippet2 This is another snippet from module.py \"\"\" def main (): \"\"\"Main function which prints \"Hello, World!\"\"\" print ( \"Hello, world!\" ) return 0 Output site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 index.html \u251c\u2500\u2500 module/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 snippet/ \u2502 \u2514\u2500\u2500 index.html \u2514\u2500\u2500 snippet2/ \u2514\u2500\u2500 index.html module Main file You can even make snippets as separate files. snippet Snippet This is a snippet from module.py. snippet2 Snippet2 This is another snippet from module.py","title":"Index"},{"location":"examples/ok-source-with-snippet/#extract-a-snippet","text":"","title":"Extract a snippet"},{"location":"examples/ok-source-with-snippet/#mkdocsyml","text":"# This is example shows to to create a snippet from a file. For example, you # can use a snippet to rearrange contents using inclusion or create a new pages # per module. site_name : ok-source-with-snippet plugins : - simple","title":"mkdocs.yml"},{"location":"examples/ok-source-with-snippet/#input","text":"ok-source-with-snippet/ \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 module.py \u251c\u2500\u2500 README.md module.py \"\"\"md ## Main file You can even make snippets as separate files. \"\"\" # md file=snippet.md # # ## Snippet # # This is a snippet from module.py. # /md \"\"\"<md file=\"snippet2.md\">Another one. ## Snippet2 This is another snippet from module.py \"\"\" def main (): \"\"\"Main function which prints \"Hello, World!\"\"\" print ( \"Hello, world!\" ) return 0","title":"Input"},{"location":"examples/ok-source-with-snippet/#output","text":"site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 index.html \u251c\u2500\u2500 module/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 snippet/ \u2502 \u2514\u2500\u2500 index.html \u2514\u2500\u2500 snippet2/ \u2514\u2500\u2500 index.html module","title":"Output"},{"location":"examples/ok-source-with-snippet/module/","text":"Main file You can even make snippets as separate files.","title":"Module"},{"location":"examples/ok-source-with-snippet/module/#main-file","text":"You can even make snippets as separate files.","title":"Main file"},{"location":"examples/ok-source-with-snippet/snippet/","text":"Snippet This is a snippet from module.py.","title":"Snippet"},{"location":"examples/ok-source-with-snippet/snippet/#snippet","text":"This is a snippet from module.py.","title":"Snippet"},{"location":"examples/ok-source-with-snippet/snippet2/","text":"Snippet2 This is another snippet from module.py","title":"Snippet2"},{"location":"examples/ok-source-with-snippet/snippet2/#snippet2","text":"This is another snippet from module.py","title":"Snippet2"},{"location":"examples/ok-with-macros/","text":"Extract docs with macros mkdocs.yml # You can even use this with other plugins, like # [macros](https://pypi.org/project/mkdocs-macros-plugin/) to achieve advanced # configurations. site_name : ok-with-macros docs_dir : /tmp/mkdocs-simple/ok-with-macros/docs plugins : - search - simple : include_extensions : - \".yml\" - macros : verbose : True extra : test : True Input ok-with-macros/ \u251c\u2500\u2500 example.md \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 module.py \u2514\u2500\u2500 README.md module.py \"\"\"md ## Python Version You can put _markdown_ in triple-quoted strings in Python. You can even use macros to inject other markdown here! For example, here's the config file: ````yaml {% if test %} {% include \"mkdocs.yml\" %} {% endif %} ```` \"\"\" def main (): \"\"\"Test function which takes no parameters. It says \"Hello, world!\" \"\"\" print ( \"Hello, world!\" ) return 0 Output site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 example/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 mkdocs-test.yml \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 module/ \u2514\u2500\u2500 index.html example Example Here's a printout of the plugin's config file, which I've included using a jinja-style macro. site_name: ok-with-macros docs_dir: /tmp/mkdocs-simple/ok-with-macros/docs plugins: - search - simple: include_extensions: - .yml - macros: verbose: true edit_uri: '' extra: test: true module Python Version You can put markdown in triple-quoted strings in Python. You can even use macros to inject other markdown here! For example, here's the config file: site_name: ok-with-macros docs_dir: /tmp/mkdocs-simple/ok-with-macros/docs plugins: - search - simple: include_extensions: - .yml - macros: verbose: true edit_uri: '' extra: test: true","title":"Index"},{"location":"examples/ok-with-macros/#extract-docs-with-macros","text":"","title":"Extract docs with macros"},{"location":"examples/ok-with-macros/#mkdocsyml","text":"# You can even use this with other plugins, like # [macros](https://pypi.org/project/mkdocs-macros-plugin/) to achieve advanced # configurations. site_name : ok-with-macros docs_dir : /tmp/mkdocs-simple/ok-with-macros/docs plugins : - search - simple : include_extensions : - \".yml\" - macros : verbose : True extra : test : True","title":"mkdocs.yml"},{"location":"examples/ok-with-macros/#input","text":"ok-with-macros/ \u251c\u2500\u2500 example.md \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 module.py \u2514\u2500\u2500 README.md module.py \"\"\"md ## Python Version You can put _markdown_ in triple-quoted strings in Python. You can even use macros to inject other markdown here! For example, here's the config file: ````yaml {% if test %} {% include \"mkdocs.yml\" %} {% endif %} ```` \"\"\" def main (): \"\"\"Test function which takes no parameters. It says \"Hello, world!\" \"\"\" print ( \"Hello, world!\" ) return 0","title":"Input"},{"location":"examples/ok-with-macros/#output","text":"site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 example/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 mkdocs-test.yml \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 module/ \u2514\u2500\u2500 index.html example","title":"Output"},{"location":"examples/ok-with-macros/example/","text":"Example Here's a printout of the plugin's config file, which I've included using a jinja-style macro.","title":"Example"},{"location":"examples/ok-with-macros/example/#example","text":"Here's a printout of the plugin's config file, which I've included using a jinja-style macro.","title":"Example"},{"location":"examples/ok-with-macros/module/","text":"Python Version You can put markdown in triple-quoted strings in Python. You can even use macros to inject other markdown here! For example, here's the config file:","title":"Module"},{"location":"examples/ok-with-macros/module/#python-version","text":"You can put markdown in triple-quoted strings in Python. You can even use macros to inject other markdown here! For example, here's the config file:","title":"Python Version"},{"location":"examples/ok-with-mkdocstrings/","text":"Extract docs with mkdocstrings mkdocs.yml # You can even use this with other plugins, like # [mkdocstrings](https://pypi.org/project/mkdocstrings/), to achieve advanced # configurations. site_name : ok-with-mkdocstrings plugins : - simple - mkdocstrings Input ok-with-mkdocstrings/ \u251c\u2500\u2500 example.md \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 module.py \u2514\u2500\u2500 README.md module.py \"\"\"md ## Python Version You can put _markdown_ in triple-quoted strings in Python. You can even combine it with mkdocstrings to automatically generate your source documentation! ::: module.main handler: python options: show_root_heading: true show_source: false heading_level: 3 \"\"\" def main (): \"\"\"Test function which takes no parameters. It says \"Hello, world!\" \"\"\" print ( \"Hello, world!\" ) return 0 Output site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 example/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 module/ \u2502 \u2514\u2500\u2500 index.html \u2514\u2500\u2500 objects.inv module Python Version You can put markdown in triple-quoted strings in Python. You can even combine it with mkdocstrings to automatically generate your source documentation! module . main () Test function which takes no parameters. It says \"Hello, world!\"","title":"Index"},{"location":"examples/ok-with-mkdocstrings/#extract-docs-with-mkdocstrings","text":"","title":"Extract docs with mkdocstrings"},{"location":"examples/ok-with-mkdocstrings/#mkdocsyml","text":"# You can even use this with other plugins, like # [mkdocstrings](https://pypi.org/project/mkdocstrings/), to achieve advanced # configurations. site_name : ok-with-mkdocstrings plugins : - simple - mkdocstrings","title":"mkdocs.yml"},{"location":"examples/ok-with-mkdocstrings/#input","text":"ok-with-mkdocstrings/ \u251c\u2500\u2500 example.md \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 module.py \u2514\u2500\u2500 README.md module.py \"\"\"md ## Python Version You can put _markdown_ in triple-quoted strings in Python. You can even combine it with mkdocstrings to automatically generate your source documentation! ::: module.main handler: python options: show_root_heading: true show_source: false heading_level: 3 \"\"\" def main (): \"\"\"Test function which takes no parameters. It says \"Hello, world!\" \"\"\" print ( \"Hello, world!\" ) return 0","title":"Input"},{"location":"examples/ok-with-mkdocstrings/#output","text":"site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 example/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 module/ \u2502 \u2514\u2500\u2500 index.html \u2514\u2500\u2500 objects.inv module","title":"Output"},{"location":"examples/ok-with-mkdocstrings/example/","text":"Example The extracted module documentation includes the documentation from the module header, and has invoked mkdocstrings to render api documentation based on Python docstrings. Compare the webpage linked above with the raw module.md generated by extraction from module.py : ## Python Version You can put _markdown_ in triple-quoted strings in Python. You can even combine it with mkdocstrings to automatically generate your source documentation! ::: module.main handler: python options: show_root_heading: true show_source: false heading_level: 3","title":"Example"},{"location":"examples/ok-with-mkdocstrings/example/#example","text":"The extracted module documentation includes the documentation from the module header, and has invoked mkdocstrings to render api documentation based on Python docstrings. Compare the webpage linked above with the raw module.md generated by extraction from module.py : ## Python Version You can put _markdown_ in triple-quoted strings in Python. You can even combine it with mkdocstrings to automatically generate your source documentation! ::: module.main handler: python options: show_root_heading: true show_source: false heading_level: 3","title":"Example"},{"location":"examples/ok-with-mkdocstrings/module/","text":"Python Version You can put markdown in triple-quoted strings in Python. You can even combine it with mkdocstrings to automatically generate your source documentation! ::: module.main handler: python options: show_root_heading: true show_source: false heading_level: 3","title":"Module"},{"location":"examples/ok-with-mkdocstrings/module/#python-version","text":"You can put markdown in triple-quoted strings in Python. You can even combine it with mkdocstrings to automatically generate your source documentation! ::: module.main handler: python options: show_root_heading: true show_source: false heading_level: 3","title":"Python Version"},{"location":"examples/ok-with-rename/","text":"Rename a file mkdocs.yml # This example shows how to rename a single file in the doc site. site_name : ok-with-rename plugins : - simple : semiliterate : - pattern : '^foo.bar$' destination : baz.md Input ok-with-rename/ \u251c\u2500\u2500 foo.bar \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 README.md Output site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 baz/ \u2502 \u2514\u2500\u2500 index.html \u2514\u2500\u2500 index.html","title":"Index"},{"location":"examples/ok-with-rename/#rename-a-file","text":"","title":"Rename a file"},{"location":"examples/ok-with-rename/#mkdocsyml","text":"# This example shows how to rename a single file in the doc site. site_name : ok-with-rename plugins : - simple : semiliterate : - pattern : '^foo.bar$' destination : baz.md","title":"mkdocs.yml"},{"location":"examples/ok-with-rename/#input","text":"ok-with-rename/ \u251c\u2500\u2500 foo.bar \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 README.md","title":"Input"},{"location":"examples/ok-with-rename/#output","text":"site/ \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u2514\u2500\u2500 favicon.png \u2502 \u251c\u2500\u2500 javascripts/ \u2502 \u2502 \u251c\u2500\u2500 lunr/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 min/ \u2502 \u2502 \u2514\u2500\u2500 workers/ \u2502 \u2514\u2500\u2500 stylesheets/ \u251c\u2500\u2500 baz/ \u2502 \u2514\u2500\u2500 index.html \u2514\u2500\u2500 index.html","title":"Output"},{"location":"mkdocs_simple_plugin/","text":"Developing Prerequisites You will need to have MKDocs installed on your system. I recommend installing it via pip to get the latest version. sudo apt-get install python-pip pip install --upgrade pip --user pip install -r requirements.txt pip install -e . Building Building this package requires using mkdocs_simple_gen to generate the site. mkdocs_simple_gen --build -- --verbose Testing Different Python versions You can even test the package with different versions of python in a container by running the test_local script. This builds a docker container with the version of python you specify and runs the integration tests within the container. ./tests/test_local.sh Python 3.x, 3.7, 3.8, 3.9, 3.10 supported. Code set -e End-to-end testing via Bats ( Bash automated tests ) function docker_run_integration_tests () { docker build -t mkdocs-simple-test-runner: $1 -f- . <<EOF FROM python:$1 RUN apt-get -y update && apt-get -y install bats gcc sudo COPY . /workspace WORKDIR /workspace EOF echo \"Running E2E tests via Bats in Docker (python: $1 ) -------->\" docker run --rm -it mkdocs-simple-test-runner: $1 tests/run_unit_tests.sh docker run --rm -it mkdocs-simple-test-runner: $1 tests/run_linters.sh docker run --rm -it mkdocs-simple-test-runner: $1 tests/run_integration_tests.sh } if [[ ! -z \" $PYTHON_V_ONLY \" ]] ; then echo \"only v $PYTHON_V_ONLY \" docker_run_integration_tests \" $PYTHON_V_ONLY \" else docker_run_integration_tests \"3\" docker_run_integration_tests \"3.7\" docker_run_integration_tests \"3.8\" docker_run_integration_tests \"3.9\" docker_run_integration_tests \"3.10\" fi Unit tests Unit tests help ensure individual functions perform as expected. Unit tests in this module use the the standard python unittest framework. ./tests/run_unit_tests.sh Code python3 -m unittest tests/test_*.py Integration tests Integration testing allows the plugin to be tested with mkdocs using example configurations. Integration testing uses bats, install it with sudo apt-get install bats Then run the tests ./tests/run_integration_tests.sh Code ./examples/gen_readme.py ./tests/integration_test.bats Lint Linting helps maintain style consistency. This package follows the google style guide . Conformity is enforced with flake8 and pydodstyle. ./tests/run_linters.sh Code echo \"Running flake8 linter -------->\" flake8 --count . echo \"Running pydocstyle\" pydocstyle --count . VSCode Included in this package is a VSCode workspace and development container. See how I develop with VSCode and Docker and how I use VSCode tasks .","title":"Developing"},{"location":"mkdocs_simple_plugin/#developing","text":"","title":"Developing"},{"location":"mkdocs_simple_plugin/#prerequisites","text":"You will need to have MKDocs installed on your system. I recommend installing it via pip to get the latest version. sudo apt-get install python-pip pip install --upgrade pip --user pip install -r requirements.txt pip install -e .","title":"Prerequisites"},{"location":"mkdocs_simple_plugin/#building","text":"Building this package requires using mkdocs_simple_gen to generate the site. mkdocs_simple_gen --build -- --verbose","title":"Building"},{"location":"mkdocs_simple_plugin/#testing","text":"","title":"Testing"},{"location":"mkdocs_simple_plugin/#different-python-versions","text":"You can even test the package with different versions of python in a container by running the test_local script. This builds a docker container with the version of python you specify and runs the integration tests within the container. ./tests/test_local.sh Python 3.x, 3.7, 3.8, 3.9, 3.10 supported. Code set -e End-to-end testing via Bats ( Bash automated tests ) function docker_run_integration_tests () { docker build -t mkdocs-simple-test-runner: $1 -f- . <<EOF FROM python:$1 RUN apt-get -y update && apt-get -y install bats gcc sudo COPY . /workspace WORKDIR /workspace EOF echo \"Running E2E tests via Bats in Docker (python: $1 ) -------->\" docker run --rm -it mkdocs-simple-test-runner: $1 tests/run_unit_tests.sh docker run --rm -it mkdocs-simple-test-runner: $1 tests/run_linters.sh docker run --rm -it mkdocs-simple-test-runner: $1 tests/run_integration_tests.sh } if [[ ! -z \" $PYTHON_V_ONLY \" ]] ; then echo \"only v $PYTHON_V_ONLY \" docker_run_integration_tests \" $PYTHON_V_ONLY \" else docker_run_integration_tests \"3\" docker_run_integration_tests \"3.7\" docker_run_integration_tests \"3.8\" docker_run_integration_tests \"3.9\" docker_run_integration_tests \"3.10\" fi","title":"Different Python versions"},{"location":"mkdocs_simple_plugin/#unit-tests","text":"Unit tests help ensure individual functions perform as expected. Unit tests in this module use the the standard python unittest framework. ./tests/run_unit_tests.sh Code python3 -m unittest tests/test_*.py","title":"Unit tests"},{"location":"mkdocs_simple_plugin/#integration-tests","text":"Integration testing allows the plugin to be tested with mkdocs using example configurations. Integration testing uses bats, install it with sudo apt-get install bats Then run the tests ./tests/run_integration_tests.sh Code ./examples/gen_readme.py ./tests/integration_test.bats","title":"Integration tests"},{"location":"mkdocs_simple_plugin/#lint","text":"Linting helps maintain style consistency. This package follows the google style guide . Conformity is enforced with flake8 and pydodstyle. ./tests/run_linters.sh Code echo \"Running flake8 linter -------->\" flake8 --count . echo \"Running pydocstyle\" pydocstyle --count .","title":"Lint"},{"location":"mkdocs_simple_plugin/#vscode","text":"Included in this package is a VSCode workspace and development container. See how I develop with VSCode and Docker and how I use VSCode tasks .","title":"VSCode"},{"location":"mkdocs_simple_plugin/generator/","text":"Mkdocs Simple Generator mkdocs_simple_gen is a program that will automatically create a mkdocs.yml configuration file (only if needed) and optionally install dependencies, build, and serve the site. Installation Install the plugin with pip. pip install mkdocs-simple-plugin Python 3.x, 3.7, 3.8, 3.9, 3.10 supported. CLI Reference mkdocs_simple_gen Generate and build a mkdocs site. Usage: mkdocs_simple_gen [OPTIONS] [MKDOCS_ARGS]... Options: --config-file TEXT Set the configuration file. --build / --no-build Build the site using mkdocs build. --serve / --no-serve Serve the site using mkdocs serve. --help Show this message and exit.","title":"Mkdocs Simple Generator"},{"location":"mkdocs_simple_plugin/generator/#mkdocs-simple-generator","text":"mkdocs_simple_gen is a program that will automatically create a mkdocs.yml configuration file (only if needed) and optionally install dependencies, build, and serve the site.","title":"Mkdocs Simple Generator"},{"location":"mkdocs_simple_plugin/generator/#installation","text":"Install the plugin with pip. pip install mkdocs-simple-plugin Python 3.x, 3.7, 3.8, 3.9, 3.10 supported.","title":"Installation"},{"location":"mkdocs_simple_plugin/generator/#cli-reference","text":"","title":"CLI Reference"},{"location":"mkdocs_simple_plugin/generator/#mkdocs_simple_gen","text":"Generate and build a mkdocs site. Usage: mkdocs_simple_gen [OPTIONS] [MKDOCS_ARGS]... Options: --config-file TEXT Set the configuration file. --build / --no-build Build the site using mkdocs build. --serve / --no-serve Serve the site using mkdocs serve. --help Show this message and exit.","title":"mkdocs_simple_gen"},{"location":"mkdocs_simple_plugin/plugin/","text":"Mkdocs Simple Plugin A plugin for MkDocs that builds a documentation website from markdown content interspersed within your code, in markdown files or in block comments in your source files. simple will search your project directory tree for documentation. By default, Markdown files and graphics files will be copied to your documentation site. Source files will also be searched for markdown embedded in minimally-structured comment blocks; these will be extracted into additional markdown files included in the documentation site. Installation Install the plugin with pip. pip install mkdocs-simple-plugin Python 3.x, 3.7, 3.8, 3.9, 3.10 supported. Usage Create a mkdocs.yml file in the root of your directory and add the simple plugin to its plugin list. site_name : \"My site\" plugins : - search : - simple : Example usage (defaults) block comments starting with: \"\"\"md \"\"\"md This is a documentation comment. \"\"\" line comments starting with: # md and ending with # /md , stripping leading spaces and `#``, and only capturing comment lines. # md # This is a documentation comment. # /md block comments starting with: /** md /** md This is a documentation comment. **/ in line comments starting with // md , ending with // end md , stripping leading spaces and // , and only capturing comment lines. // md // This is a documentation comment. // end md block comments starting with <!-- md and ending with --> <!-- md This is a documentation comment. --> Inline parameters Inline parameters configure a block's extraction. These parameters should be on the same line as the start block. For example: /**md file=\"new_name.md\" trim=2 content=\"^\\s*\\/\\/\\s?(.*)$\" Set output file name Filename is relative to the folder of the file being processed. file=<name> Trim the front of a line Useful for removing leading spaces. trim=# Capture content Regex expression to capture content, otherwise all lines are captured. content=<regex> Stop capture Regex expression to indicate capture should stop. stop=<regex> Ignoring files You can add a .mkdocsignore file to ignore a directory or files by glob pattern. See example mkdocsignore usage Default settings Below are the default settings of the plugin. include_folders : - '*' ignore_folders : [] ignore_hidden : true merge_docs_dir : true build_docs_dir : '' include_extensions : - .bmp - .tif - .tiff - .gif - .svg - .jpeg - .jpg - .jif - .jiff - .jp2 - .jpx - .j2k - .j2c - .fpx - .pcd - .png - .pdf - CNAME - .snippet - .pages - LICENSE semiliterate : - pattern : .* terminate : ^\\W*md-ignore extract : - start : ^\\s*\"\"\"\\W?md\\b stop : ^\\s*\"\"\"\\s*$ - start : ^\\s*#+\\W?md\\b stop : ^\\s*#\\s?\\/md\\s*$ replace : - ^\\s*# ?(.*\\n?)$ - ^.*$ - start : ^\\s*/\\*+\\W?md\\b stop : ^\\s*\\*\\*/\\s*$ - start : ^\\s*\\/\\/+\\W?md\\b stop : ^\\s*\\/\\/\\send\\smd\\s*$ replace : - ^\\s*\\/\\/\\s?(.*\\n?)$ - ^.*$ - start : <!--\\W?md\\b stop : -->\\s*$ Note If you add your own settings but want to also use any of these, you must reiterate the settings you want in your mkdocs.yml file. Configuration scheme include_folders Directories whose name matches a glob pattern in this list will be searched for documentation ignore_folders Directories whose name matches a glob pattern in this list will NOT be searched for documentation. ignore_hidden Hidden directories will not be searched if this is true. merge_docs_dir If true, the contents of the docs directory (if any) will be merged at the same level as all other documentation. Otherwise, the docs directory will be retained as a subdirectory in the result. build_docs_dir If set, the directory where docs will be collated to be build. Otherwise, the build docs directory will be a temporary directory. include_extensions Any file in the searched directories whose name contains a string in this list will simply be copied to the generated documentation. semiliterate The semiliterate settings allows the extraction of markdown from inside source files. It is defined as a list of blocks of settings for different filename patterns (typically matching filename extensions). All regular expression parameters use ordinary Python re syntax. pattern Any file in the searched directories whose name contains this required regular expression parameter will be scanned. destination By default, the extracted documentation will be copied to a file whose name is generated by removing the (last) extension from the original filename, if any, and appending .md . However, if this parameter is specified, it will be expanded as a template using the match object from matching \"pattern\" against the filename, to produce the name of the destination file. terminate If specified, all extraction from the file is terminated when a line containing this regexp is encountered (whether or not any extraction is currently active per the parameters below). The last matching group in the terminate expression, if any, is written to the destination file; note that \"start\" and \"stop\" below share that same behavior. extract This parameter determines what will be extracted from a scanned file that matches the pattern above. Its value should be a block or list of blocks of settings. start (optional) The regex pattern to indicate the start of extraction. Only the first mode whose start expression matches is activated, so at most one mode of extraction can be active at any time. When an extraction is active, lines from the scanned file are processed into the destination file. Note The (last) extraction mode (if any) with no start parameter is active starting at the first line of the scanned file; there is no way this mode can be reactivated if it stops. This convention allows for convenient \"front-matter\" extraction. stop (optional) The regex pattern to indicate the stop of extraction. After the extraction has stopped, the file will continue to be searched for matching patterns starting with the next line of the scanned file. In this way the entire file will be processed looking for start-stop pairs. replace The replace parameter allows extracted lines from a file to be transformed in simple ways by regular expressions, for example to strip leading comment symbols if necessary. The replace parameter is a list of substitutions to attempt. Each substitution is specified either by a two-element list of a regular expression and a template, or by just a regular expression. Once one of the replace patterns matches, processing stops; no further expressions are checked. Build You can build mkdocs from the command line using the standard command mkdocs build or you can generate and build at the same time see generator . Run a local server One of the best parts of mkdocs is the ability to serve (and update!) your documentation site locally. mkdocs serve","title":"Mkdocs Simple Plugin"},{"location":"mkdocs_simple_plugin/plugin/#mkdocs-simple-plugin","text":"A plugin for MkDocs that builds a documentation website from markdown content interspersed within your code, in markdown files or in block comments in your source files. simple will search your project directory tree for documentation. By default, Markdown files and graphics files will be copied to your documentation site. Source files will also be searched for markdown embedded in minimally-structured comment blocks; these will be extracted into additional markdown files included in the documentation site.","title":"Mkdocs Simple Plugin"},{"location":"mkdocs_simple_plugin/plugin/#installation","text":"Install the plugin with pip. pip install mkdocs-simple-plugin Python 3.x, 3.7, 3.8, 3.9, 3.10 supported.","title":"Installation"},{"location":"mkdocs_simple_plugin/plugin/#usage","text":"Create a mkdocs.yml file in the root of your directory and add the simple plugin to its plugin list. site_name : \"My site\" plugins : - search : - simple :","title":"Usage"},{"location":"mkdocs_simple_plugin/plugin/#example-usage-defaults","text":"block comments starting with: \"\"\"md \"\"\"md This is a documentation comment. \"\"\" line comments starting with: # md and ending with # /md , stripping leading spaces and `#``, and only capturing comment lines. # md # This is a documentation comment. # /md block comments starting with: /** md /** md This is a documentation comment. **/ in line comments starting with // md , ending with // end md , stripping leading spaces and // , and only capturing comment lines. // md // This is a documentation comment. // end md block comments starting with <!-- md and ending with --> <!-- md This is a documentation comment. -->","title":"Example usage (defaults)"},{"location":"mkdocs_simple_plugin/plugin/#inline-parameters","text":"Inline parameters configure a block's extraction. These parameters should be on the same line as the start block. For example: /**md file=\"new_name.md\" trim=2 content=\"^\\s*\\/\\/\\s?(.*)$\"","title":"Inline parameters"},{"location":"mkdocs_simple_plugin/plugin/#set-output-file-name","text":"Filename is relative to the folder of the file being processed. file=<name>","title":"Set output file name"},{"location":"mkdocs_simple_plugin/plugin/#trim-the-front-of-a-line","text":"Useful for removing leading spaces. trim=#","title":"Trim the front of a line"},{"location":"mkdocs_simple_plugin/plugin/#capture-content","text":"Regex expression to capture content, otherwise all lines are captured. content=<regex>","title":"Capture content"},{"location":"mkdocs_simple_plugin/plugin/#stop-capture","text":"Regex expression to indicate capture should stop. stop=<regex>","title":"Stop capture"},{"location":"mkdocs_simple_plugin/plugin/#ignoring-files","text":"You can add a .mkdocsignore file to ignore a directory or files by glob pattern. See example mkdocsignore usage","title":"Ignoring files"},{"location":"mkdocs_simple_plugin/plugin/#default-settings","text":"Below are the default settings of the plugin. include_folders : - '*' ignore_folders : [] ignore_hidden : true merge_docs_dir : true build_docs_dir : '' include_extensions : - .bmp - .tif - .tiff - .gif - .svg - .jpeg - .jpg - .jif - .jiff - .jp2 - .jpx - .j2k - .j2c - .fpx - .pcd - .png - .pdf - CNAME - .snippet - .pages - LICENSE semiliterate : - pattern : .* terminate : ^\\W*md-ignore extract : - start : ^\\s*\"\"\"\\W?md\\b stop : ^\\s*\"\"\"\\s*$ - start : ^\\s*#+\\W?md\\b stop : ^\\s*#\\s?\\/md\\s*$ replace : - ^\\s*# ?(.*\\n?)$ - ^.*$ - start : ^\\s*/\\*+\\W?md\\b stop : ^\\s*\\*\\*/\\s*$ - start : ^\\s*\\/\\/+\\W?md\\b stop : ^\\s*\\/\\/\\send\\smd\\s*$ replace : - ^\\s*\\/\\/\\s?(.*\\n?)$ - ^.*$ - start : <!--\\W?md\\b stop : -->\\s*$ Note If you add your own settings but want to also use any of these, you must reiterate the settings you want in your mkdocs.yml file.","title":"Default settings"},{"location":"mkdocs_simple_plugin/plugin/#configuration-scheme","text":"","title":"Configuration scheme"},{"location":"mkdocs_simple_plugin/plugin/#include_folders","text":"Directories whose name matches a glob pattern in this list will be searched for documentation","title":"include_folders"},{"location":"mkdocs_simple_plugin/plugin/#ignore_folders","text":"Directories whose name matches a glob pattern in this list will NOT be searched for documentation.","title":"ignore_folders"},{"location":"mkdocs_simple_plugin/plugin/#ignore_hidden","text":"Hidden directories will not be searched if this is true.","title":"ignore_hidden"},{"location":"mkdocs_simple_plugin/plugin/#merge_docs_dir","text":"If true, the contents of the docs directory (if any) will be merged at the same level as all other documentation. Otherwise, the docs directory will be retained as a subdirectory in the result.","title":"merge_docs_dir"},{"location":"mkdocs_simple_plugin/plugin/#build_docs_dir","text":"If set, the directory where docs will be collated to be build. Otherwise, the build docs directory will be a temporary directory.","title":"build_docs_dir"},{"location":"mkdocs_simple_plugin/plugin/#include_extensions","text":"Any file in the searched directories whose name contains a string in this list will simply be copied to the generated documentation.","title":"include_extensions"},{"location":"mkdocs_simple_plugin/plugin/#semiliterate","text":"The semiliterate settings allows the extraction of markdown from inside source files. It is defined as a list of blocks of settings for different filename patterns (typically matching filename extensions). All regular expression parameters use ordinary Python re syntax.","title":"semiliterate"},{"location":"mkdocs_simple_plugin/plugin/#pattern","text":"Any file in the searched directories whose name contains this required regular expression parameter will be scanned.","title":"pattern"},{"location":"mkdocs_simple_plugin/plugin/#destination","text":"By default, the extracted documentation will be copied to a file whose name is generated by removing the (last) extension from the original filename, if any, and appending .md . However, if this parameter is specified, it will be expanded as a template using the match object from matching \"pattern\" against the filename, to produce the name of the destination file.","title":"destination"},{"location":"mkdocs_simple_plugin/plugin/#terminate","text":"If specified, all extraction from the file is terminated when a line containing this regexp is encountered (whether or not any extraction is currently active per the parameters below). The last matching group in the terminate expression, if any, is written to the destination file; note that \"start\" and \"stop\" below share that same behavior.","title":"terminate"},{"location":"mkdocs_simple_plugin/plugin/#extract","text":"This parameter determines what will be extracted from a scanned file that matches the pattern above. Its value should be a block or list of blocks of settings.","title":"extract"},{"location":"mkdocs_simple_plugin/plugin/#start","text":"(optional) The regex pattern to indicate the start of extraction. Only the first mode whose start expression matches is activated, so at most one mode of extraction can be active at any time. When an extraction is active, lines from the scanned file are processed into the destination file. Note The (last) extraction mode (if any) with no start parameter is active starting at the first line of the scanned file; there is no way this mode can be reactivated if it stops. This convention allows for convenient \"front-matter\" extraction.","title":"start"},{"location":"mkdocs_simple_plugin/plugin/#stop","text":"(optional) The regex pattern to indicate the stop of extraction. After the extraction has stopped, the file will continue to be searched for matching patterns starting with the next line of the scanned file. In this way the entire file will be processed looking for start-stop pairs.","title":"stop"},{"location":"mkdocs_simple_plugin/plugin/#replace","text":"The replace parameter allows extracted lines from a file to be transformed in simple ways by regular expressions, for example to strip leading comment symbols if necessary. The replace parameter is a list of substitutions to attempt. Each substitution is specified either by a two-element list of a regular expression and a template, or by just a regular expression. Once one of the replace patterns matches, processing stops; no further expressions are checked.","title":"replace"},{"location":"mkdocs_simple_plugin/plugin/#build","text":"You can build mkdocs from the command line using the standard command mkdocs build or you can generate and build at the same time see generator .","title":"Build"},{"location":"mkdocs_simple_plugin/plugin/#run-a-local-server","text":"One of the best parts of mkdocs is the ability to serve (and update!) your documentation site locally. mkdocs serve","title":"Run a local server"}]}