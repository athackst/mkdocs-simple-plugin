{
  // See https://go.microsoft.com/fwlink/?LinkId=733558
  // for the documentation about the tasks.json format
  "version": "2.0.0",
  "tasks": [
    {
      "label": "printenv",
      "type": "shell",
      "command": "printenv",
      "problemMatcher": []
    },
    {
      "label": "pip install",
      "type": "shell",
      "command": "pip install --user -r requirements.txt; pip install -e . ",
      "problemMatcher": []
    },
    {
      "label": "mkdocs_simple_gen",
      "type": "shell",
      "command": "mkdocs_simple_gen",
      "dependsOn": [
        "pip install"
      ],
      "problemMatcher": []
    },
    {
      "label": "gen_readme",
      "type": "shell",
      "command": "./examples/gen_readme.py",
      "problemMatcher": []
    },
    {
      "label": "mkdocs build",
      "type": "shell",
      "command": "mkdocs build --verbose",
      "dependsOrder": "sequence",
      "dependsOn": [
        "mkdocs_simple_gen",
      ],
      "problemMatcher": []
    },
    {
      "label": "mkdocs serve",
      "type": "shell",
      "command": "mkdocs serve --verbose",
      "dependsOrder": "sequence",
      "dependsOn": [
        "mkdocs_simple_gen",
      ],
      "problemMatcher": []
    },
    {
      "label": "mkdocs serve (dirtyreload)",
      "type": "shell",
      "command": "mkdocs serve --dirtyreload",
      "problemMatcher": []
    },
    {
      "label": "clean",
      "type": "shell",
      "command": "sudo rm -rf site/ build/ dist/ *.egg-info/ **/__pycache__/  **/docs_/ examples/*/mkdocs.yml examples/*/site/ examples/*/README.md",
      "problemMatcher": []
    },
    {
      "label": "build",
      "type": "shell",
      "command": "./build.sh",
      "problemMatcher": [],
      "group": {
        "kind": "build",
        "isDefault": true
      }
    },
    {
      "label": "action build",
      "type": "shell",
      "command": "docker build -t althack/mkdocs-simple-plugin:latest -f Dockerfile .",
      "problemMatcher": []
    },
    {
      "label": "action dry run",
      "type": "shell",
      "command": "docker run --rm -v ${workspaceFolder}:/docs -e INPUT_PUSH -e INPUT_SITE_DIR --user $(id -u):$(id -g) althack/mkdocs-simple-plugin:latest deploy.sh",
      "options": {
        "env": {
          "INPUT_SITE_DIR": "/docs/site",
          "INPUT_PUSH": "false"
        }
      }
    },
    {
      "label": "action dry run (root)",
      "type": "shell",
      "command": "docker run --rm -v ${workspaceFolder}:/docs -e INPUT_PUSH -e INPUT_SITE_DIR althack/mkdocs-simple-plugin:latest deploy.sh",
      "options": {
        "env": {
          "INPUT_SITE_DIR": "/docs/site",
          "INPUT_PUSH": "false"
        }
      }
    },
    {
      "label": "action update",
      "type": "shell",
      "command": "docker run --rm -v ${workspaceFolder}:/docs -e INPUT_PUSH -e INPUT_SITE_DIR althack/mkdocs-simple-plugin:latest update.sh",
      "options": {
        "env": {
          "INPUT_SITE_DIR": "/docs/site",
          "INPUT_PUSH": "false"
        }
      }
    },
    {
      "label": "action serve",
      "type": "shell",
      "command": "docker run --rm -p 8000:8000 -v ${PWD}:/docs -it althack/mkdocs-simple-plugin:latest"
    },
    {
      "label": "test",
      "type": "shell",
      "dependsOrder": "sequence",
      "dependsOn": [
        "test lint",
        "test unittest",
        "test integration",
        "htmlproofer"
      ],
      "group": {
        "kind": "test",
        "isDefault": true
      }
    },
    {
      "label": "test unittest",
      "type": "shell",
      "command": "./tests/run_unit_tests.sh",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      }
    },
    {
      "label": "test integration",
      "type": "shell",
      "command": "./tests/run_integration_tests.sh",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      }
    },
    {
      "label": "test lint",
      "type": "shell",
      "command": "./tests/run_linters.sh",
      "problemMatcher": [
        {
          "owner": "run_linters",
          "applyTo": "allDocuments",
          "fileLocation":"relative",
          "pattern": [
            {
              "regexp": "^(.*):(\\d+)(:(\\d+):\\s(\\w\\d+)(.*))$",
              "file": 1,
              "line": 2,
              "column": 4,
              "code": 5,
              "message": 6
            }
          ]
        },
        {
          "owner": "run_linters",
          "applyTo": "allDocuments",
          "fileLocation": "relative",
          "pattern": [
            {
              "regexp": "^(.*):(\\d+)(.*):$",
              "file": 1,
              "line": 2,
            },
            {
              "regexp": "^\\s*(.*):.(.*)$",
              "code": 1,
              "message": 2
            }
          ]
        }
      ],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      }
    },
    {
      "label": "htmlproofer",
      "type": "shell",
      "command": "htmlproofer",
      "args": [
        "--ignore-urls='https://fonts.gstatic.com,https://twitter.com/althack'",
        "--swap-urls='^.*althack.dev\/mkdocs-simple-plugin:,^\/mkdocs-simple-plugin:,^\/latest:'",
        "./site"
      ],
      "dependsOrder": "sequence",
      "dependsOn": [
        "build"
      ],
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      }
    },
    {
      "label": "package",
      "type": "shell",
      "command": "hatch build",
      "problemMatcher": []
    },
    {
      "label": "upgrade",
      "type": "shell",
      "command": "pip3 install --upgrade pip && pip-upgrade --skip-virtualenv-check -p all",
      "problemMatcher": []
    },
    {
      "label": "setup",
      "type": "shell",
      "command": "./setup.sh",
      "problemMatcher": []
    },
    {
      "label": "debugger prelaunch",
      "type": "shell",
      "command": "pwd; cp mkdocs-test.yml mkdocs.yml; /home/vscode/.local/bin/mkdocs_simple_gen --no-build",
      "options": {
        "cwd": "${fileDirname}"
      },
      "dependsOn": [
        "pip install"
      ],
    }
  ]
}
