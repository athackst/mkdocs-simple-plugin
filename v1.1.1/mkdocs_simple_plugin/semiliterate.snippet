
#### pattern
Any file in the searched directories whose name contains this
required regular expression parameter will be scanned.

#### destination
By default, the extracted documentation will be copied to a file
whose name is generated by removing the (last) extension from the
original filename, if any, and appending `.md`. However, if this
parameter is specified, it will be expanded as a template using
the match object from matching "pattern" against the filename,
to produce the name of the destination file.

#### terminate
If specified, all extraction from the file is terminated when
a line containing this regexp is encountered (whether or not
any extraction is currently active per the parameters below).
The last matching group in the `terminate` expression, if any,
is written to the destination file; note that "start" and "stop"
below share that same behavior.

#### extract

This parameter determines what will be extracted from a scanned
file that matches the pattern above. Its value should be a block
or list of blocks of settings.

##### start
(optional) The regex pattern to indicate the start of extraction.

Only the first mode whose `start` expression matches is activated, so at
most one mode of extraction can be active at any time.
When an extraction is active, lines from the scanned
file are copied to the destination file (possibly modified by
the "replace" parameter below).

Additionally, start can specify an output path for the extracted
content. Simply add `file=output_path.md` to the start token line.

Example:

`````
# md file=ouput_path.md
`````

!!!Note
      The (last) extraction mode (if any) with no `start`
      parameter is active beginning with the first line of the scanned
      file; there is no way such a mode can be reactivated if it stops.
      This convention allows for convenient "front-matter" extraction.

##### stop
(optional) The regex pattern to indicate the stop of extraction.

The `simple` plugin will begin searching for further occurrences
of `start` expressions on the _next_ line of the scanned file.

##### replace

The `replace` parameter allows extracted lines from a file to
be transformed in simple ways by regular expressions, for
example to strip leading comment symbols if necessary.

The `replace` parameter is a list of substitutions to attempt.
Each substitution is specified either by a two-element list of a
regular expression and a template, or by just a regular expression.

Once one of the
`replace` patterns matches, processing stops; no further expressions
are checked.

<!-- todo: link to example -->

